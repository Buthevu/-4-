type tree = Node of int * tree * tree|Leaf;;

let rec print_tree t=
match t with
Leaf ->print_string"Leaf"
|Node (i,t1,t2)->print_string"Node (";print_int i;print_string",";print_tree t1;print_string",";print_tree t2;print_string")";;

let rec klp t=
match t with
Leaf ->[] 
|Node (i,t1,t2)-> let l1 = (klp t1) in
                  let l2 = (klp t2) in
                  (i::(l1 @ l2));;

let rec lkp t=
match t with
Leaf ->[] 
|Node (i,t1,t2)-> let l1 = (lkp t1) in
                  let l2 = (lkp t2) in
                  (l1 @ (i :: l2));;

let rec lpk t=
match t with
Leaf ->[]
|Node (i,t1,t2)-> let l1 = (lpk t1) in
                  let l2 = (lpk t2) in
                  ((l1 @ l2) @ [i]);; 

print_string"Test klp (Node (1,(Node (3,Leaf,leaf)),(Node (5,(Node (7,Leaf,Leaf)),(Node (6,Leaf,Leaf))))))\n|";;

List.iter (fun x -> print_int x;print_string"|") (klp (Node (1,(Node (3,Leaf,Leaf)),(Node (5,(Node (7,Leaf,Leaf)),(Node (6,Leaf,Leaf)))))));;

print_string"\nTest lkp (Node (1,(Node (3,Leaf,leaf)),(Node (5,(Node (7,Leaf,Leaf)),(Node (6,Leaf,Leaf))))))\n|";;

List.iter (fun x -> print_int x;print_string"|") (lkp (Node (1,(Node (3,Leaf,Leaf)),(Node (5,(Node (7,Leaf,Leaf)),(Node (6,Leaf,Leaf)))))));;

print_string"\nTest lpk (Node (1,(Node (3,Leaf,leaf)),(Node (5,(Node (7,Leaf,Leaf)),(Node (6,Leaf,Leaf))))))\n|";;

List.iter (fun x -> print_int x;print_string"|") (lpk (Node (1,(Node (3,Leaf,Leaf)),(Node (5,(Node (7,Leaf,Leaf)),(Node (6,Leaf,Leaf)))))));;

let rec separate l x t=
match l with
a::b when a = x->(t,b)
|a::b->separate b x (t @ [a])
|[]->failwith"separate";;

let rec detach l n t=
match l with
a::b->if n = 0 then (t,(a::b)) else (detach b (n - 1) (t @ [a]))
|[]->if n = 0 then (t,[]) else failwith"detach";;

 
let rec recover l1 l2=
match (l1,l2) with
([],[])->(Leaf)
|(a1::b1,a2::b2)->let (y1,y2) = (separate (a2::b2) a1 []) in
                  let (x1,x2) = (detach b1 (List.length y1) []) in
                  let t1 = (recover x1 y1) in 
                  let t2 = (recover x2 y2) in
                  (Node (a1,t1,t2))
|(_,_)->failwith"";;

print_string"\nTest recover.\n";;

if ((Node (1,(Node (3,Leaf,Leaf)),(Node (5,(Node (7,Leaf,Leaf)),(Node (6,Leaf,Leaf)))))) = (recover [1;3;5;7;6] [3;1;7;5;6])) then print_string"True" else print_string"False";;

print_string"\nTest recover2 of [1;3;5;7;6] [3;1;7;5;6].\n";;

print_tree (recover [1;3;5;7;6] [3;1;7;5;6]);;

let rec merge l1 l2=
match (l1,l2) with
(a1 :: b1,a2 :: b2)->((a1 @ a2)::(merge b1 b2))
|([],[])->[]
|(a1::b1,[])->(a1::b1)
|([],a1::b1)->(a1::b1);;


let rec by_layer t=
match t with
Leaf -> [[]]
|Node (i,t1,t2)->let l1 = (by_layer t1) in
                 let l2 = (by_layer t2) in
                 ([i]::(merge l1 l2));;


let rec sliv l=
match l with
a::b->(a @ (sliv b))
|[]->[];;

print_string"\nTest of top-down view from left to right.Of (Node (1,(Node (3,Leaf,Leaf)),(Node (5,(Node (7,Leaf,Leaf)),(Node (6,Leaf,Leaf))))))  (P.S 13576)\n";;

List.iter (fun x -> print_int x) (sliv (by_layer (Node (1,(Node (3,Leaf,Leaf)),(Node (5,(Node (7,Leaf,Leaf)),(Node (6,Leaf,Leaf))))))));;

let print_int_list l=
let rec sup_f li=
match li with
a::b::c->print_int a;print_string";";sup_f (b::c)
|a::b->print_int a;sup_f b
|[]->print_string"]" in
print_string"[";
sup_f l;;

let rec serialize l len n=
if len = 0 then l
           else (serialize ((n land 1)::l) (len - 1) (n lsr 1));;

print_string"Test of serialize [1;0;1;0;0] 4 5 is ";;
print_int_list (serialize [1;0;1;0;0] 4 5);;


let deserialize l len=
let rec sup_f l1 len1 n1=
if len1 = 0 then (n1,l1)
            else (match l1 with
                  a::b->sup_f b (len1 - 1) ((n1 lsl 1) + a)
                 |[]->failwith"") in
(sup_f l len 0);;

print_string"\nTest of deserialize [1;0;1;0;0;1;0;1] 3 is ";;
let (pr1,pr2) = (deserialize [1;0;1;0;0;1;0;1] 3);;
print_string "(";;
print_int pr1;
print_string ",";
print_int_list pr2;
print_string")\n"

let turn_over l=
let rec sup_f l1 l2=
match l1 with
a::b->sup_f b (a::l2)
|[]->l2 in
sup_f l [];;

let split_to_bytes l=
let rec sup_f l1 l2=
match l1 with
i1::i2::i3::i4::i5::i6::i7::i8::b->(sup_f b (((i1 lsl 7)+(i2 lsl 6)+(i3 lsl 5)+(i4 lsl 4)+(i5 lsl 3)+(i6 lsl 2)+(i7 lsl 1)+ i8)::l2))
|[]->(turn_over l2)
|i1::i2::i3::i4::i5::i6::i7::[]->(sup_f [] (((i1 lsl 7)+(i2 lsl 6)+(i3 lsl 5)+(i4 lsl 4)+(i5 lsl 3)+(i6 lsl 2)+(i7 lsl 1))::l2))
|i1::i2::i3::i4::i5::i6::[]->(sup_f [] (((i1 lsl 7)+(i2 lsl 6)+(i3 lsl 5)+(i4 lsl 4)+(i5 lsl 3)+(i6 lsl 2))::l2))
|i1::i2::i3::i4::i5::[]->(sup_f [] (((i1 lsl 7)+(i2 lsl 6)+(i3 lsl 5)+(i4 lsl 4)+(i5 lsl 3))::l2))
|i1::i2::i3::i4::[]->(sup_f [] (((i1 lsl 7)+(i2 lsl 6)+(i3 lsl 5)+(i4 lsl 4))::l2))
|i1::i2::i3::[]->(sup_f [] (((i1 lsl 7)+(i2 lsl 6)+(i3 lsl 5))::l2))
|i1::i2::[]->(sup_f [] (((i1 lsl 7)+(i2 lsl 6))::l2))
|i1::[]->(sup_f [] (((i1 lsl 7))::l2)) in
sup_f l [];;

print_string"Test of split_to_bytes [1;1;1;1;1;1;1;1;1;0;0;0] is ";;
print_int_list (split_to_bytes [1;1;1;1;1;1;1;1;1;0;0;0]);;

let join_bytes l=
let rec sup_f l1 l2 = 
match l1 with
a::b->(sup_f b ((turn_over (((a land 0b10000000) lsr 7)::((a land 0b1000000) lsr 6)::((a land 0b100000) lsr 5)::((a land 0b10000) lsr 4)::((a land 0b1000) lsr 3)::((a land 0b100) lsr 2)::((a land 0b10) lsr 1)::(a land 0b1)::[])) @ l2))
|[]->(turn_over l2) in
sup_f l [];;

print_string"\nTest of join_bytes [254;1] is ";;
print_int_list (join_bytes [254;1]);;
  
let info_from_file s=
let f = open_in_bin s in
let give_f t=
try
   let n = input_byte t in
   (1,n)
with
   _->(0,0) in
   
let rec sup_f t l=
match (give_f t) with
(1,n)->sup_f t (n::l)
|_->(turn_over l) in
let l = join_bytes (sup_f f []) in
close_in f; l;;
    
let rewrite_file s l=
let f = open_out_bin s in
let rec sup_f t li=
match li with
a::b->output_byte t a;sup_f t b;
|[]->close_out f in
sup_f f (split_to_bytes l);;

print_string"\nRewrite w.txt [0;0;0;1;1;0;1;0;1;1;0;0;1;1;0;0]";;
rewrite_file "w.txt" [0;0;0;1;1;0;1;0;1;1;0;0;1;1;0;0];;
      
print_string"\ninfo_from w.txt ";;
print_int_list (info_from_file "w.txt");;


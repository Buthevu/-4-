let rec sum_elem l=
match l with
a::b->(a+(sum_elem b))
|[]->0;;

let num_of_rib l=
sum_elem (List.map (fun x -> (sum_elem x)) l);;
print_string("num of rib in \n000\n010\n001\n is "^(string_of_int (num_of_rib [[0;0;0];[0;1;0];[0;0;1]])));;

let rec give_n_elem n l=
match l with
a::b-> if n = 0 then a else (give_n_elem (n - 1) b)
|[]->failwith"";;

let give_nachal matr l=
let rec sup_f i=
if i = (List.length matr) then []
else if (sum_elem (List.map (fun x ->(give_n_elem i x)) matr)) = 0 then (i::(sup_f (i+1)))
else (sup_f (i+1)) in
(List.map (fun x -> (give_n_elem x l)) (sup_f 0));;

print_string ("\n\nwithout going in ribs tops in \n |a|b|c\na|0|0|0|\nb|0|1|1\nc|0|0|1\n is ");(List.map (fun x->print_string x) (give_nachal [[0;0;0];[0;1;1];[0;0;1]] ["a";"b";"c"]));;

let rec give_num l x=
match l with
a::b-> if a = x then 0 else (1+(give_num b x))
|[]->failwith"";;

let info_about_top mat l x=
((sum_elem (give_n_elem (give_num l x) mat)),(sum_elem (List.map (fun y -> (give_n_elem (give_num l x) y)) mat)));;

print_string ("\n\nnum of riba out from \'b\' and in to \'b\' in \n |a|b|c\na|0|0|0|\nb|0|1|1\nc|0|0|1\n is "^((fun (x,y) -> (string_of_int x)^" and "^(string_of_int y))) (info_about_top [[0;0;0];[0;1;1];[0;0;1]] ["a";"b";"c"] "b"));;

let rec turn_over l=
match l with
a::b->(turn_over b) @ [a]
|[]->[];;

let rec list_to_n l n=
match (turn_over l) with
a::b->a+((list_to_n (turn_over b) n)*n)
|[]->0;;
print_string "\n\n[1;0;1] in 2-system is ";;
print_int (list_to_n [1;0;1] 2);;
let rec n_to_list n i=
if n = 0 then [] else
((n_to_list (n/i) i)@[n mod i]);;
print_string"\n\n 5 to 2-system is |";;
List.iter (fun x-> print_int x;print_string"|") (n_to_list 5 2);;




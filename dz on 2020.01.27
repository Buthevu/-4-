let rec list_separete n=
if n = 1 then [[1]]
else if n = 2 then [[1;1];[2]]
else (let matr = ref [] in
for i = 1 to (n - 1) do
matr := !matr @ (List.map (fun x -> ((n-i)::x)) (list_separete i));
done;
(!matr @ [[n]])
);;

let rec filter l f=
match l with
a::b->if (f a) then (a::(filter b f)) else (filter b f) 
|[]->[];;

let rec chek_simple n=
let rec f m i=
if m = 1 then true else if i = m then true else (if (m mod i) = 0 then false else (f m (i+1))) in
f n 2;;
print_string"\nSay number to list of separetes:";;

(let n = read_int() in
List.iter (fun x -> (print_string"|";List.iter (fun y -> (print_int y;print_string"|")) x;print_string"\n")) (list_separete n));;

print_string"\nSay number to list of separetes length 2*k:";;

(let n = read_int() in
List.iter (fun x -> (print_string"|";List.iter (fun y -> (print_int y;print_string"|")) x;print_string"\n")) (filter (list_separete n) (fun x->(((List.length x) mod 2)=0))));;

print_string"\nSay number to list of simple separetes length:";;

(let n = read_int() in
List.iter (fun x -> (print_string"|";List.iter (fun y -> (print_int y;print_string"|")) x;print_string"\n")) (filter (list_separete n) (fun x->((filter x (fun y ->(chek_simple y)))=x))));;


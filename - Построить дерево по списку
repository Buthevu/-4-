(*По списку построить дерево*)

type tree = Node of tree * int * tree|Leaf;;

let rec bubble l1 l2=
match l1 with
a::b::c-> if a <= b then (bubble (b::c) (l2 @ [a])) else (bubble (l2 @ (b::a::c)) [])
|a::b->(l2 @ l1)
|[]->l2;;

let rec separate l1 l2 n=
match l1 with
a::b->if n = 0 then (l2,l1) else (separate b (l2 @ [a]) (n - 1))
|[]->(l2,[]);;

let rec make_tree ls=
let l = (bubble ls []) in
if l = [] then Leaf else
        (let (l1,l2) = (separate l [] (((List.length l) - 1) / 2)) in
         let (l3,l4) = (separate l2 [] 1) in
         match l3 with
         a::[]->(Node ((make_tree l1),a,(make_tree l4)))
        |_->failwith""
        );;

let rec print_tree t=
match t with
Node (t1,i,t2) ->print_string"Node ((";print_tree t1;print_string"),";print_int i;print_string",(";print_tree t2;print_string"))"
|Leaf->print_string"L";;

print_tree (make_tree [5;1;4;2;3]);;

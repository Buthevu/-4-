let number_of_lines_in_file s=
let f = open_in s in
   let rec n_o_l_i_f t=
     try
       let _ = (input_line t) in
       (1 + (n_o_l_i_f t)) 
     with
       _->0 in
  let n = (n_o_l_i_f f) in
close_in f;
n;;
print_string "number_of_lines_in_file \"saga.txt\" is ";;
print_int (number_of_lines_in_file "saga.txt")

let longest_line_in_file s=
let f = open_in s in
  let rec l_l_i_f t =
    try
       let s1 = (input_line t) in
       let s2 = (l_l_i_f t) in
       if (String.length s1) > (String.length s2) 
           then s1
           else s2
    with
       _->"" in
  let s = (l_l_i_f f) in
close_in f;
s;;

print_string "\nlongest_line_in_file \"saga.txt\" is \n";;
print_string (longest_line_in_file "saga.txt")

let rec chek_include x l=
match l with
a::b->if a = x then true else (chek_include x b)
|[]->false;;

let list_of_words str=
let rec sup_fun s1 s2 i=                           
if i = (String.length s1) then (if s2 = "" then [] else [s2])
   else (if (chek_include (s1.[i]) ['.';',';';';':';'(';'\'';'?';'!';' ';')']) 
           then (if s2 = "" then (sup_fun s1 "" (i+1)) 
                            else (s2::(sup_fun s1 "" (i+1)))) 
           else (sup_fun s1 (s2^(String.make 1 (s1.[i]))) (i+1))) in
sup_fun str "" 0;;

let rec longest_word_in_list l=
match l with
a::b->let s = (longest_word_in_list b) in
      if (String.length s) > (String.length a) then s else a
|[]->"";;
                                 
let longest_word_in_file s=      
let f = (open_in s) in
  let rec sup_fun t=
    try
       let s1 = (longest_word_in_list (list_of_words (input_line t))) in
       let s2 = (sup_fun t) in
       if (String.length s1) > (String.length s2) then s1 else s2
    with
       _->"" in
let str = (sup_fun f) in
close_in f;
str;;                              
               
print_string "\nlongest_word_in_file \"saga.txt\" is ";;
print_string (longest_word_in_file "saga.txt");;

let char_utf8 t=
let n1 = (input_byte t) in
  if n1 land 0b10000000 = 0 
     then n1
     else if n1 land 0b11100000 = 0b11000000 then (let n2 = (input_byte t) in ((n1 land 0b00011111) lsl 6)+(n2 land 0b00111111))
                                             else if n1 land 0b11110000 = 0b11100000 then (let n2 = (input_byte t) in
                                                                                           let n3 = (input_byte t) in
                                                                  (((n1 land 0b00001111) lsl 12)+((n2 land 0b00111111) lsl 6)+(n3 land 0b00111111)))
                                                                                     else (let n2 = (input_byte t) in
                                                                                           let n3 = (input_byte t) in
                                                                                           let n4 = (input_byte t) in
                                                                  (((n1 land 0b00000111) lsl 18)+((n2 land 0b00111111) lsl 12)+((n3 land 0b00111111) lsl 6)+(n4 land 0b00111111)));;

let file_utf8_to_list_of_num s=
let f = (open_in_bin s) in
let rec sup_fun t=
  try
     let n = (char_utf8 t) in
     n::(sup_fun t)  
  with
      _->[] in
let l =(sup_fun f) in
close_in f;
l;;

let turn_over l=
let rec sup_fun l1 l2=
match l1 with
a::b->(sup_fun b (a::l2))
|[]->l2 in
sup_fun l [];; 


let filter l f=
let rec sup_f l1 l2 f1=
match l1 with
a::b->if (f1 a) then (sup_f b (a::l2) f1) else (sup_f b l2 f1)
|[]->turn_over l2 in
sup_f l [] f;;
                      
print_string "\nNumber of rus \'a\' in text.txt is ";;
print_int (List.length (filter (file_utf8_to_list_of_num "text.txt") (fun x -> (x = 0x0430))));;

print_string "\nNumber of king in text.txt is ";;
print_int (List.length (filter (file_utf8_to_list_of_num "text.txt") (fun x -> (x = 0x738b))));;

print_string"\nLength of file text.txt in utf-8 is ";;
print_int (List.length (file_utf8_to_list_of_num "text.txt"));;

let int_to_utf8 n= if n <= 0b01111111 then [n] 
                   else if (n <= 0x7ff) then [((n lsr 6) lor 0b11000000);((n land 0b00111111) lor 0b10000000)] 
                        else if (n <= 0xffff) then [((n lsr 12) lor 0b11100000);(((n lsr 6) land 0b00111111) lor 0b10000000);((n land 0b00111111) lor 0b10000000)] else failwith"write code";;

let f_out = (open_out_bin ("nums_from_1_to_100.txt"));;

let rec separate s i=
if i = (String.length s) then [] else ((s.[i])::(separate s (i+1)));;

let rec file_from_n_to_1 n= 
if n = 0 then
close_out f_out else ((List.iter (fun x-> output_byte f_out (x)) (List.map (fun x ->(0x0030 +(int_of_string (String.make 1 x)))) (separate (string_of_int n) 0)));
                     output_byte f_out 0x020;file_from_n_to_1 (n - 1));;

file_from_n_to_1 100;;

let japan_char_to_utf8 c=
match c with
'0'->[]
|'1'->[0x4e00]
|'2'->[0x4e8c]
|'3'->[0x4e09]
|'4'->[0x56db]
|'5'->[0x4e94]
|'6'->[0x516d]
|'7'->[0x4e03]
|'8'->[0x516b]
|'9'->[0x4e5d];;
let japan_char_to_utf8 n=if (String.length (string_of_int n)) = 1 then (japan_char_to_utf8 ((string_of_int n).[0])) else ((japan_char_to_utf8 ((string_of_int n).[0]))@[0x5341]@(japan_char_to_utf8 ((string_of_int n).[1])));;


let f_out = (open_out_bin ("rus_alfav.txt"));;

for i = 0x0410 to 0x044f do
(List.iter (fun x ->output_byte f_out x) (int_to_utf8 i));
output_byte f_out 0x0020;
done;;
close_out f_out;;


let f_out = (open_out_bin ("japan_nums_from_1_to_100.txt"));;

let file_of_fapan_num ()=
let rec fu l=
match l with
a::b->(a @ (fu b))
|[]->[] in
for i = 1 to 99 do
(List.iter (fun x ->output_byte f_out x) (fu (List.map (fun x ->int_to_utf8 x) (japan_char_to_utf8 i))));
output_byte f_out 0x0020;
done;
(List.iter (fun x -> output_byte f_out x) (int_to_utf8 (0x767e)));; 
               (*НА моем компьютере нет японкого поэтому проверить себя я не могу, но в решении уверен.*)
file_of_fapan_num ();;
close_out f_out;;

let  cp1251_to_utf8 s=
let f = (open_in s) in
let f_out = (open_out ("utf8_"^s)) in
let rec fup_f t =
try
   let n = input_byte t in
   if n < 0x0080 then (output_byte f_out n) else (List.iter (fun x -> output_byte f_out x) (int_to_utf8 (n + (0x410 - 0x00c0))));
   fup_f t; 
with
    _->close_out f_out in
fup_f f;
close_in f;;
              (*Файл 1252.txt должен быть в 1251 кодировке*)
cp1251_to_utf8 "1251.txt";;

let  utf8_to_cp1251 s=
let f = (open_in s) in
let f_out = (open_out ("cp1251_"^s)) in
let rec fup_f t =
try
   let n = char_utf8 t in
   if n < 0x0080 then (output_byte f_out n) else  (output_byte f_out (n - (0x410 - 0x00c0)));
   fup_f t; 
with
    _->close_out f_out in
fup_f f;
close_in f;;
              (*Файл ut8.txt должен быть в utf8 кодировке*)
utf8_to_cp1251 "ut8.txt";;

let  mo_len s=
let f = (open_in s) in
let rec sup_f t n sum=
try 
   let n1 = char_utf8 t in
   sup_f t (n+1) (sum + (List.length (int_to_utf8 n1)))
with
    _-> ((float_of_int sum)/.(float_of_int n)) in
let f1 = sup_f f 0 0 in
close_in f;
f1;;
              (*Файл ut8.txt должен быть в utf8 кодировке*)
print_string "\nMath expectation of length of char in ut8.txt ";;
print_float (mo_len "ut8.txt");;
                                                                                              
